import ChevronRightIcon from "@mui/icons-material/ChevronRight"
import HomeIcon from "@mui/icons-material/Home"
import {
  Box,
  Card,
  CardContent,
  IconButton,
  Typography,
  useTheme,
} from "@mui/material"
import Grid from "@mui/material/Grid"
import React, { FC, useMemo } from "react"
import { Link, useParams } from "react-router-dom"

import { useConstants } from "../constantsProvider"
import { useLLMIsAvailable } from "../hooks/useAPIMeta"
import { useLatestStudyDetail } from "../hooks/useLatestStudyDetail"
import { useStudyIsPreferential, useStudyName } from "../state"
import { AppDrawer } from "./AppDrawer"
import { GraphByLLM } from "./GraphByLLM"
import { Contour } from "./GraphContour"
import { GraphEdf } from "./GraphEdf"
import { GraphRank } from "./GraphRank"
import { GraphSlice } from "./GraphSlice"
import { StudyNote } from "./Note"
import { PreferentialAnalytics } from "./Preferential/PreferentialAnalytics"
import { PreferentialGraph } from "./Preferential/PreferentialGraph"
import { PreferentialHistory } from "./Preferential/PreferentialHistory"
import { PreferentialTrials } from "./Preferential/PreferentialTrials"
import { StudyHistory } from "./StudyHistory"
import { TrialList } from "./TrialList"
import { TrialSelection } from "./TrialSelection"

type PageId =
  | "top"
  | "analytics"
  | "trialTable"
  | "trialList"
  | "trialSelection"
  | "note"
  | "preferenceHistory"
  | "graph"

export const useURLVars = (): number => {
  const { studyId } = useParams<{ studyId: string }>()

  if (studyId === undefined) {
    throw new Error("studyId is not defined")
  }

  return useMemo(() => parseInt(studyId, 10), [studyId])
}

export const StudyDetail: FC<{
  toggleColorMode: () => void
  page: PageId
}> = ({ toggleColorMode, page }) => {
  const { url_prefix } = useConstants()
  const llmEnabled = useLLMIsAvailable()

  const theme = useTheme()
  const studyId = useURLVars()
  const studyName = useStudyName(studyId)
  const isPreferential = useStudyIsPreferential(studyId)

  const studyDetail = useLatestStudyDetail({
    studyId: studyId,
    // For Human-in-the-loop Optimization, the interval is set to 2 seconds
    // when the number of trials is small, and the page is "trialList" or top page of preferential.
    shortInterval:
      (!isPreferential && page === "trialList") ||
      (!!isPreferential && page === "top"),
  })

  const title =
    studyName !== null ? `${studyName} (id=${studyId})` : `Study #${studyId}`

  let content = null
  if (page === "top") {
    content = isPreferential ? (
      <PreferentialTrials studyDetail={studyDetail} />
    ) : (
      <StudyHistory studyId={studyId} />
    )
  } else if (page === "analytics") {
    content = isPreferential ? (
      <PreferentialAnalytics studyId={studyId} />
    ) : (
      <Box
        component="div"
        sx={{ display: "flex", width: "100%", flexDirection: "column" }}
      >
        <Typography
          variant="h5"
          sx={{
            margin: theme.spacing(2),
            marginTop: theme.spacing(4),
            fontWeight: theme.typography.fontWeightBold,
          }}
        >
          Hyperparameter Relationships
        </Typography>
        <Card sx={{ margin: theme.spacing(2) }}>
          <CardContent>
            <GraphSlice study={studyDetail} />
          </CardContent>
        </Card>
        <Card sx={{ margin: theme.spacing(2) }}>
          <CardContent>
            <Contour study={studyDetail} />
          </CardContent>
        </Card>
        <Card sx={{ margin: theme.spacing(2) }}>
          <CardContent>
            <GraphRank study={studyDetail} />
          </CardContent>
        </Card>
        <Typography
          variant="h5"
          sx={{
            margin: theme.spacing(2),
            marginTop: theme.spacing(4),
            fontWeight: theme.typography.fontWeightBold,
          }}
        >
          Empirical Distribution of the Objective Value
        </Typography>
        <Grid container spacing={2} sx={{ padding: theme.spacing(2) }}>
          {studyDetail !== null
            ? studyDetail.directions.map((d, i) => (
                <Grid item xs={6} key={i}>
                  <Card>
                    <CardContent>
                      <GraphEdf studies={[studyDetail]} objectiveId={i} />
                    </CardContent>
                  </Card>
                </Grid>
              ))
            : null}
        </Grid>
        {llmEnabled && (
          <>
            <Typography
              variant="h5"
              sx={{
                margin: theme.spacing(2),
                marginTop: theme.spacing(4),
                fontWeight: theme.typography.fontWeightBold,
              }}
            >
              Graph Generated by LLM
            </Typography>
            <GraphByLLM study={studyDetail} />
          </>
        )}
      </Box>
    )
  } else if (page === "trialList") {
    content = <TrialList studyDetail={studyDetail} />
  } else if (page === "trialSelection" && studyDetail !== null) {
    content = <TrialSelection studyDetail={studyDetail} />
  } else if (page === "note" && studyDetail !== null) {
    content = (
      <Box
        component="div"
        sx={{
          height: `calc(100vh - ${theme.spacing(8)})`,
          display: "flex",
          flexDirection: "column",
          padding: theme.spacing(2),
        }}
      >
        <Typography
          variant="h5"
          sx={{
            fontWeight: theme.typography.fontWeightBold,
            margin: theme.spacing(2, 0),
          }}
        >
          Note
        </Typography>
        <StudyNote
          studyId={studyId}
          latestNote={studyDetail.note}
          cardSx={{ flexGrow: 1 }}
        />
      </Box>
    )
  } else if (page === "graph") {
    content = (
      <Box
        component="div"
        sx={{
          height: `calc(100vh - ${theme.spacing(8)})`,
          padding: theme.spacing(2),
        }}
      >
        <PreferentialGraph studyDetail={studyDetail} />
      </Box>
    )
  } else if (page === "preferenceHistory") {
    content = <PreferentialHistory studyDetail={studyDetail} />
  }

  const toolbar = (
    <>
      <IconButton
        component={Link}
        to={url_prefix + "/"}
        sx={{ marginRight: theme.spacing(1) }}
        color="inherit"
        title="Return to the top page"
      >
        <HomeIcon />
      </IconButton>
      <ChevronRightIcon sx={{ marginRight: theme.spacing(1) }} />
      <Typography
        noWrap
        component="div"
        sx={{ fontWeight: theme.typography.fontWeightBold }}
      >
        {title}
      </Typography>
    </>
  )

  return (
    <Box component="div" sx={{ display: "flex" }}>
      <AppDrawer
        studyId={studyId}
        toggleColorMode={toggleColorMode}
        toolbar={toolbar}
      >
        {content}
      </AppDrawer>
    </Box>
  )
}
